#include <Wire.h>
#include <Adafruit_BNO055.h>
#include <Adafruit_BME280.h>
#include <Ticker.h>
#include <cmath>
#include <TinyGPS++.h>
#include <math.h>
#include <HardwareSerial.h>
#define RXD2 16
#define TXD2 17
#define PI 3.14159265
#define EARTH_RAD 6378.137 // km


Adafruit_BNO055 bno=Adafruit_BNO055(55, 0x28);;
const int BME_CS = 5;
const int BME_SCK = 18;
const int BME_MOSI = 23;
const int BME_MISO = 19;
double oira_data[3] = {0, 0, 0};
double pres_data[3] = {0, 0, 0};  
double acc_data[3] = {0, 0, 0};  
double gps_data[2] = {0,0};
double mag_data[2] ={0,0};
double leg_data[2] = {0,0};
double mag_offset = 1.0;
double yaw_offset = 17.8;
Adafruit_BME280 bme(BME_CS, BME_MOSI, BME_MISO, BME_SCK);
TinyGPSPlus gps;
double gps_lat; // 緯度
double gps_lon; // 経度
const int PWMA = 12;
const int AIN1 = 13;
const int AIN2 = 14;
const int STBY = 25;
const int PWMB = 2;
const int BIN1 = 4;
const int BIN2 = 0;
const int LEDC_CHANNEL_A = 0;
const int LEDC_CHANNEL_B = 1;
const int LEDC_BASE_FREQ = 1000;
double relativeDirection;
//pid
#define gpsSp 255
#define gpsTp 0.3

float last_turn_error = 0.0;
float last_d_term = 0.0;
float alpha = 0.1;
float kp = 0.5;
float kd = 0;
float ki = 0.1;
float last_turn = 0;
float i_turn = 0;
float integral_turn = 0.0;
int PID_left = 0;
int PID_right = 0;
//setup
void setup() {
  Serial.begin(115200); // シリアル通信の初期化
  Serial2.begin(9600, SERIAL_8N1, RXD2, TXD2);
  while (!Serial);


  pinMode(21, INPUT_PULLUP); //SDA 21番ピンのプルアップ
  pinMode(22, INPUT_PULLUP); //SDA 22番ピンのプルアップ

  Serial.println("Orientation Sensor Raw Data Test");

  if (!bno.begin()) {
    Serial.print("Ooops, no BNO055 detected ... Check your wiring or I2C ADDR!");
    while (1);
  }

  delay(1000);

  /* Display the current temperature */
  int8_t temp = bno.getTemp();
  Serial.print("Current Temperature: ");
  Serial.print(temp);
  Serial.println(" C");

  bno.setExtCrystalUse(false);

  Serial.println("Calibration status values: 0=uncalibrated, 3=fully calibrated");

    // PWMの初期化
  Serial.println("Initializing PWM for motor A...");
  ledcSetup(LEDC_CHANNEL_A, LEDC_BASE_FREQ, 8);
  ledcAttachPin(PWMA, LEDC_CHANNEL_A);

  Serial.println("Initializing PWM for motor B...");
  ledcSetup(LEDC_CHANNEL_B, LEDC_BASE_FREQ, 8);
  ledcAttachPin(PWMB, LEDC_CHANNEL_B);

  // GPIOピンの初期化
  Serial.println("Initializing GPIO pins...");
  pinMode(AIN1, OUTPUT);
  pinMode(AIN2, OUTPUT);
  pinMode(STBY, OUTPUT);
  pinMode(BIN1, OUTPUT);
  pinMode(BIN2, OUTPUT);

  Serial.println("Setting STBY to HIGH...");
  digitalWrite(STBY, HIGH); // スタンバイ解除
  

}

void mae(int i,int j){
  //Serial.println("Motor A Forward");
  digitalWrite(AIN1, HIGH);
  digitalWrite(AIN2, LOW);
  //Serial.println("Motor B Forward");
  digitalWrite(BIN1, LOW);
  digitalWrite(BIN2, HIGH);
  ledcWrite(LEDC_CHANNEL_A, i);
  ledcWrite(LEDC_CHANNEL_B, j);
}


// 停止
void stop(){
  //Serial.println("Stop");
  digitalWrite(AIN1, LOW);
  digitalWrite(AIN2, LOW);
  digitalWrite(BIN1, LOW);
  digitalWrite(BIN2, LOW); 

}

// 回転_右
void spin_r(int i, int j){
  //Serial.println("spin_r");
  digitalWrite(AIN1, HIGH);
  digitalWrite(AIN2, LOW);
  digitalWrite(BIN1, HIGH);
  digitalWrite(BIN2, LOW);
  ledcWrite(LEDC_CHANNEL_A, i);
  ledcWrite(LEDC_CHANNEL_B, j);
}

// 回転_左
void spin_l(int i, int j){
  //Serial.println("spin_l");
  digitalWrite(AIN1, LOW);
  digitalWrite(AIN2, HIGH);
  digitalWrite(BIN1, LOW);
  digitalWrite(BIN2, HIGH);
  ledcWrite(LEDC_CHANNEL_A, i);
  ledcWrite(LEDC_CHANNEL_B, j);
}

// オイラ角取得
void get_oira() {
  imu::Quaternion quat = bno.getQuat();

  double w = quat.w();
  double x = quat.x();
  double y = quat.y();
  double z = quat.z();

  // ロール (x軸の回転)
  double t0 = +2.0 * (w * x + y * z);
  double t1 = +1.0 - 2.0 * (x * x + y * y);
  double roll = atan2(t0, t1);

  // ピッチ (y軸の回転)
  double t2 = +2.0 * (w * y - z * x);
  double pitch = asin(t2);

  // ヨー (z軸の回転)
  double t3 = +2.0 * (w * z + x * y);
  double t4 = +1.0 - 2.0 * (y * y + z * z);
  double yaw = atan2(t3, t4);

  oira_data[0] = roll * 57.2957795131;   // ラジアンから度に変換
  oira_data[1] = pitch * 57.2957795131;  // ラジアンから度に変換
  oira_data[2] = yaw * 57.2957795131 + yaw_offset;    // ラジアンから度に変換

  Serial.println(oira_data[0]);
}

void get_mag() {
  imu::Vector<3> magnetmetor = bno.getVector(Adafruit_BNO055::VECTOR_MAGNETOMETER);
  Serial.print(" Mg_xyz:");
  Serial.print(magnetmetor .x());
  Serial.print(", ");
  Serial.print(magnetmetor .y());
  Serial.print(", ");
  Serial.print(magnetmetor .z());

  float heading = calculate_heading(magnetmetor.x(), magnetmetor.y());
  Serial.print(" Heading: ");
  Serial.println(heading);
  mag_data[0] = heading;
}

float calculate_heading(float x, float y) {
  // アークタンジェントで方位角を計算（ラジアンから度に変換）
  float heading = atan2(y, x) * 180 / PI;


  if (heading < 0) {
    heading += 360;
  }

  return heading;
}

void para() {
    while (Serial.available()) {
        String command = Serial.readStringUntil('\n'); // 改行まで読み取る

        Serial.println("par_sta");

        // コマンドに応じた処理を実行
        if (command == "para") {
            digitalWrite(AIN1, HIGH);
            digitalWrite(AIN2, LOW);
            digitalWrite(BIN1, HIGH);
            digitalWrite(BIN2, LOW);

            for(int i = 230; i <= 180; i--){
              ledcWrite(LEDC_CHANNEL_A, 230);
              ledcWrite(LEDC_CHANNEL_B, i);
              delay(10);
              Serial.print("Speed A: ");
              Serial.print(i);
              Serial.print(" | Speed B: ");
              Serial.println(i);
            } 
            for(int i = 180; i <= 230; i--){
              ledcWrite(LEDC_CHANNEL_A, 230);
              ledcWrite(LEDC_CHANNEL_B, i);
              delay(10);
              Serial.print("Speed A: ");
              Serial.print(i);
              Serial.print(" | Speed B: ");
              Serial.println(i);
            } 
          Serial.println("kaihi");
          Serial.println("end_cam");
          adjust();
        }

         
        else if (command == "non") {
            Serial.println("non para");
        } 
        else {
            Serial.println("Unknown command");
        }
    }
}


// 収納判定
void level() {
  
  while (1) {
    get_oira();
    if (oira_data[0] > -50 && oira_data[0] <50) {
      delay(10000);
    } 
    else {
      break;
    }
  }
  Serial.println("In the tube");
}

double calculate_bearing(double lat1, double lon1, double lat2, double lon2) {
    double delta_lon = lon2 - lon1;
    double x = sin(delta_lon * PI / 180.0) * cos(lat2 * PI / 180.0);
    double y = cos(lat1 * PI / 180.0) * sin(lat2 * PI / 180.0) - sin(lat1 * PI / 180.0) * cos(lat2 * PI / 180.0) * cos(delta_lon * PI / 180.0);
    double bearing_rad = atan2(x, y);
    double bearing_deg = bearing_rad * (180.0 / PI);
    return fmod((bearing_deg + 360), 360); // 方位角を0-360の範囲内に調整
}

// 度をラジアンに変換
double deg2rad(double deg) {
    return deg * PI / 180.0;
}

// 距離計算
double calculate_distance(double lat1, double lon1, double lat2, double lon2) {
    lat1 = deg2rad(lat1);
    lon1 = deg2rad(lon1);
    lat2 = deg2rad(lat2);
    lon2 = deg2rad(lon2);

    return EARTH_RAD * acos(sin(lat1) * sin(lat2) + cos(lat1) * cos(lat2) * cos(lon2 - lon1));
}

void gp_data() {
  //Serial.println("made");
    while (Serial2.available() > 0) {
        char c = Serial2.read();
        gps.encode(c);
        if (gps.location.isUpdated()) {
            gps_lat = gps.location.lat();
            gps_lon = gps.location.lng();
            /*
            Serial.print("LAT:  ");
            Serial.println(gps_lat, 9);
            Serial.print("LON:  ");
            Serial.println(gps_lon, 9);
            */

            // ゴール地点の緯度,経度
            double goal_lat = 35.918224833;  // ゴールの緯度
            double goal_lon = 139.908224833; // ゴールの経度

            // 現在地からゴール地点への方位角の計算
            double bearing = calculate_bearing(gps_lat, gps_lon, goal_lat, goal_lon);

            // 現在地からゴール地点までの距離の計算
            double distance = calculate_distance(gps_lat, gps_lon, goal_lat, goal_lon);
            /*
            Serial.print("方位角: ");
            Serial.println(bearing);
            Serial.print("距離: ");
            Serial.print(distance);
            Serial.println(" km");
            */
            gps_data[0] = bearing;   
            gps_data[1] = distance;
            break;
          }
     }

}

double get_turn() {
  gp_data();
  get_mag();
  double currentmag = mag_data[0]; 
  double goalDirection = gps_data[0];
  double relativeDirection = goalDirection - currentmag;
  /*
  Serial.println(currentmag);
  Serial.println(goalDirection);
  Serial.println(relativeDirection);
/*  if (relativeDirection < -180) {
    relativeDirection += 360;
  } else if (relativeDirection > 180) {
    relativeDirection -= 360;
  }
*/
  leg_data[0] = relativeDirection;
  return relativeDirection;
}

void adjust() {
  while (true) {
    get_turn();
    /*
    Serial.println("finish get_turn");
    */

    double ave_turn = leg_data[0];
    double ave_dit = gps_data[1];
    Serial.println(ave_turn);
    
    if (abs(ave_turn) <= 20) {
      stop();
      Serial.println("ok_adjust");
      break;
    } 
    else if(ave_turn < 0){
        spin_r(230, 230);
        delay(500);

          
      }
    else if(ave_turn > 0){
        spin_l(230, 230);
        delay(500);

          
      }
    }
    
}



void pid() {
  while (true) {
    get_turn();

    double ave_turn = leg_data[0];
    double ave_dit = gps_data[1];

    if (ave_dit < 0.005) {
        stop();
        break;
    } 
    else {
        float turn_error = ave_turn;

        float p_term = kp * turn_error;
        integral_turn += (turn_error + last_turn_error) / 2;
     

        float i_term = ki * integral_turn;
        float d_term_raw = turn_error - last_turn_error;
        float d_term = alpha * d_term_raw + (1 - alpha) * last_d_term;
        last_d_term = d_term;

        float pid_output = p_term + i_term + d_term;

        float last_turn_error = turn_error;

        if (pid_output > 0) {
            PID_left = gpsSp;
            PID_right = gpsSp - gpsTp * pid_output;
        } else {
            PID_right = gpsSp;
            PID_left = gpsSp + gpsTp * pid_output;
        }        
        
        PID_left = constrain(PID_left, 0, 255);
        PID_right = constrain(PID_right, 0, 255);
 
        /*
        Serial.print("\tMoterpower : ");
        Serial.print(PID_left);
        Serial.print(",");
        Serial.println(PID_right);
        */
        mae(PID_left, PID_right);
    }
 }
}

void camera_yudou(){
  while(true){
      if (Serial.available()) {
        String command = Serial.readStringUntil('\n'); // 改行まで読み取る

        Serial.println("start_cam"); //rasへのコマンド指令

        if (command == "left") {
          spin_r(230,230);
          delay(500);

        }
        else if (command == "right") {
          spin_l(230,230);
          delay(500);

        } 
        else if (command == "centor") {
          stop();
          Serial.println("ok");
          break;
        }
        else {
          spin_l(230,230);
          delay(1000);
        }
    }
  }
}

void goal() {
    while(true){
      if (Serial.available()) {
        String command = Serial.readStringUntil('\n'); // 改行まで読み取る

        Serial.println("start_goal"); //rasへのコマンド指令

        if (command == "arrival") {
          stop();
          Serial.println("goal");
          Serial.println("end_cam");
          break;
        }
        else {
          mae(230,230);

        }
    }
  }

}

//起動のための
void first() {
  while(true){
    if (Serial.available()) {
      String command = Serial.readStringUntil('\n');
  
      if (command == "start") {
        Serial.println("begin");
        break;
      }

    }
  }
}

void loop(){
  first();
  Serial.println("go!");
  adjust();
  Serial.println("next_pid");
  pid();
  Serial.println("next_camera");
  camera_yudou();
  goal();
  Serial.println("ok!!");
}
